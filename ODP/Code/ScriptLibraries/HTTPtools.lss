'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	Library RESTtools
	Created Jan 18, 2021 by Devin Olson/USA/PNPHCL
	Tools for communicating with REST Services. 
%END REM
Option Public
Option Explicit 

Use "enhLogClass"
Use "azlwAppUtils"



'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Function HTTPget(url$, headers As StringList, response$) As String

'++LotusScript Development Environment:2:5:(Declarations):0:10
Private Const LIB_PREFIX = |Library: HTTPtools.|

Const ERR_HTTP_REQUEST_FAILURE = 1401
Const MSG_HTTP_REQUEST_FAILURE = |The HTTP Request operation has failed.  |

'++LotusScript Development Environment:2:1:HTTPget:11:8
%REM
	Function httpGET
	Performs an HTTP GET Request and returns the result.
	
	@param url$ URL for the request 
	@param headers Header Field values to be included in the request 
	@param response HTTP Response (if any) resulting from the request. 
	
	@return ResponseCode from the HTTP Request 
%END REM
Function HTTPget(url$, headers As StringList, response$) As String
	On Error GoTo ErrorTrap
	
	' exception variables
	Dim extendedinfo List As String 
	Dim msg$
	
	Dim request As NotesHTTPRequest
	Dim nav As NotesJSONNavigator
	Dim errorelement As NotesJSONElement
	Dim errorobject As NotesJSONObject 
	Dim innerError As StringList 
	Dim sl As StringList 

	Dim strippedResponse$ 
	Dim tag$
	
	Dim errcode$ 
	Dim result$ ' responseCode
	
	
	
	' BEGIN CODE
	
	extendedinfo(|URL|) = url$
	
	Set request = getCurrentSession().createHTTPrequest() 
	request.Preferstrings = True
	
	If Not (headers Is Nothing) Then 
		ForAll s In headers.content 
			tag$ = ListTag(s) 
			extendedinfo(|headers.| & tag) = s 
			Call request.Setheaderfield(tag$, s)
		End ForAll
	End If
	
	response$ = request.get(url$)
	extendedinfo(|response|) = response$
	
	result$ = request.ResponseCode 
	extendedinfo(|responseCode|) = result$
	
	strippedResponse$ = stripCRLF(response$)
	extendedinfo(|strippedResponse|) = strippedResponse$
	
	Set nav = getCurrentSession().createJSONNavigator(strippedResponse$) 
	Set errorelement = nav.getFirstElement()  
	If (errorelement Is Nothing) Then GoTo ExitPoint 
	If (0 <> StrComp("error", errorelement.Name, 5)) Then GoTo ExitPoint  ' success 
	
	
	' process the error 
	Set errorobject = errorelement.Value 
	Set errorelement = errorobject.getFirstElement() 
	While Not (errorelement Is Nothing) 
		Select Case LCase(errorelement.Name) 
			Case |code|
				errcode$ = CStr(errorelement.Value)
			
			Case |message| 
				extendedinfo(|error.message|) = CStr(errorelement.Value)
				
			Case Else 
				Set sl = jsonElementToStringList(errorelement) 
				extendedinfo(|error.| & errorelement.Name) = sl.json
				 
		End Select

		Set errorelement = errorobject.getNextElement()  
	Wend

	Error ERR_HTTP_REQUEST_FAILURE, MSG_HTTP_REQUEST_FAILURE & CRLF & result$ & |: | & errcode$

ExitPoint:
	If (errorobject Is Nothing) Then 
		enhLogMethodResult ||, |Success: | & result$
		enhlogExtendedContent ||, |Response: |, response$
		enhLogExtendedContent ||, ||, ||
	End If 
	
	HTTPget = result$
ErrorTrap:
	On Error GoTo 0
	ForAll s In extendedinfo
		If isBlankString(msg$) Then 
			msg$ = ListTag(s) & |: | & s
		Else 
			msg$ = msg$ & Chr(10) & ListTag(s) & |: | & s
		End If
	End ForAll
	enhLogException ||, msg$
	Resume ExitPoint 	
End Function